{"changed":true,"filter":false,"title":"recursion.js","tooltip":"/joannatomassoni.github.io/projects/recursion-practice/src/recursion.js","value":"// Solve all of the following prompts using recursion.\n\n// 1. Calculate the factorial of a number.  The factorial of a non-negative integer n,\n// denoted by n!, is the product of all positive integers less than or equal to n.\n// Example:  5! = 5 x 4 x 3 x 2 x 1 = 120\n// factorial(5);  // 120\nvar factorial = function(n) {\n  // factorial is multiplying a number by all the numbers less than or equal to n\n  // base case: n is equal to 0, return n\n  if (n < 0) {\n    return null;\n  } else if (n === 0) {\n    return 1;\n  } // recursive case\n  return n * factorial(n-1);\n};\n\n\n// 2. Compute the sum of an array of integers.\n// Example:  sum([1, 2, 3, 4, 5, 6]);  // 21\nvar sum = function(array) {\n  // base case: number is array[array.length - 1]\n  if (array.length === 0) {\n    return 0;\n  } // add zero index element to recursive call, modifying array with splice(1)\n  return array[0] + sum(array.slice(1));\n};\n\n// 3. Sum all numbers in an array containing nested arrays.\n// Example: arraySum([1,[2,3],[[4]],5]); // 15\nvar arraySum = function(array) {\n};\n\n// 4. Check if a number is even.\nvar isEven = function(n) {\n  // edge case: if n is negative, then we need to multiply it by -1\n  if (n < 0) {\n     n *= -1;\n  }\n  // base case: n is 1 or 0\n  if (n === 1 || n === 0) {\n    return n === 0 ? true : false;\n  } \n  // recursive case:\n  return isEven(n-2);\n};\n\n// 5. Sum all integers below a given integer.\n// sumBelow(10); // 45\n// sumBelow(7); // 21\nvar sumBelow = function(n) {\n  // base case: n is 0\n  if (n === 0) {\n    return 0;\n  } \n  // recursive case: if-else\n  // if n is negative, recurse \"upwards\", add\n  if (n < 0) {\n    n += 1;\n    return n + sumBelow(n);\n  }\n  // if n is positive, subtract 1 from n\n  n -= 1;\n  return n + sumBelow(n);\n};\n\n// 6. Get the integers in range (x, y).\n// Example:  range(2, 9);  // [3, 4, 5, 6, 7, 8]\nvar range = function(x, y) {\n  // base case:\n  if (x === y) {\n    return [];\n  }\n  // if y is less than x\n  if (y < x) {\n    // decrement x by 1\n    x -= 1;\n    // if y is equal to x\n    if (y === x) {\n      // return empty array\n      return [];\n    } \n    // return [x] concatenated to range(x,y)\n    return [x].concat(range(x,y));\n  }\n  // if x is less than y\n  if (x < y) {\n    // if x is equal to y - 1\n    if (x === y - 1) {\n    return [];\n  } x += 1;\n    return [x].concat(range(x,y));\n  }\n};\n\n\n// 7. Compute the exponent of a number.\n// The exponent of a number says how many times the base number is used as a factor.\n// 8^2 = 8 x 8 = 64.  Here, 8 is the base and 2 is the exponent.\n// Example:  exponent(4,3);  // 64\n// https://www.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/computing-powers-of-a-number\nvar exponent = function(base, exp) {\n  // base case \n  if (exp === 0) {\n    return 1;\n  } if (exp === 1) {\n    return base;\n  } \n  // recursive cases\n  // if exp is positive\n    if (exp > 0) {\n    return base * exponent(base, exp - 1);\n  } \n  // if exp is negative\n  if (exp < 0) {\n    exp *= -1;\n    let expNeg = base * (exponent(base, exp - 1));\n    return 1 / expNeg;\n  }\n};\n\n\n// 8. Determine if a number is a power of two.\n// powerOfTwo(1); // true\n// powerOfTwo(16); // true\n// powerOfTwo(10); // false\nvar powerOfTwo = function(n) {\n  // base case of n as 0 or 1\n  if (n === 0) {\n    return false;\n  } if (n === 1 || n === 2 ) {\n    return true;\n  } return powerOfTwo(n/2);\n};\n\n\n// 9. Write a function that accepts a string a reverses it.\nvar reverse = function(string) {\n  // base case: string.length === 0\n  if (!string.length) {\n    return \"\";\n  } \n  return reverse(string.substr(1)).concat((string.charAt(0)));\n};\n\n\n// 10. Write a function that determines if a string is a palindrome.\nvar palindrome = function(string) {\n  string = string.toLowerCase().trim(\" \");\n  // base case\n  if (string.length === 0 || string.length === 1) {\n    return true;\n  } \n  // check first and last chars, if they're equal then recurse\n  // if not return false\n  if (string[0] === string[string.length - 1]) {\n    return palindrome(string.slice(1, string.length - 1));\n  } else {\n      return false;\n  }\n};\n\n// 11. Write a function that returns the remainder of x divided by y without using the\n// modulo (%) operator.\n// modulo(5,2) // 1\n// modulo(17,5) // 2\n// modulo(22,6) // 4\nvar modulo = function(x, y) {\n};\n\n// 12. Write a function that multiplies two numbers without using the * operator  or\n// JavaScript's Math object.\nvar multiply = function(x, y) {\n  if (y === 0 || x === 0) {\n    return 0;\n  } \n  if (x > 0 && y < 0) {\n    return -(x - (multiply(x, y + 1)));\n  }\n  if (x < 0 && y > 0) {\n    return x + (multiply(x, y - 1));\n  }\n  if (y > 0 && x > 0) {\n  return x + (multiply(x, y - 1));\n  }\n  if (x < 0 && y < 0) {\n    return -x + (multiply(x, y + 1));\n  }\n};\n\n// 13. Write a function that divides two numbers without using the / operator  or\n// JavaScript's Math object.\nvar divide = function(x, y) {\n\n};\n\n// 14. Find the greatest common divisor (gcd) of two positive numbers.  The GCD of two\n// integers is the greatest integer that divides both x and y with no remainder.\n// Example:  gcd(4,36);  // 4\n// http://www.cse.wustl.edu/~kjg/cse131/Notes/Recursion/recursion.html\n// https://www.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm\nvar gcd = function(x, y) {\n};\n\n// 15. Write a function that compares each character of two strings and returns true if\n// both are identical.\n// compareStr('house', 'houses') // false\n// compareStr('', '') // true\n// compareStr('tomato', 'tomato') // true\nvar compareStr = function(str1, str2) {\n  // base case\n// if both strings are empty, return true\n  if (!str1.length && !str2.length) {\n    return true;\n  } \n  // if first characters are not equal, return false\n  if (str1[0] !== str2[0]) {\n    return false;\n  }\n  // else call recursion by slicing to the next character\n  if (str1[0] === str2[0]) {\n    return compareStr(str1.slice(1), str2.slice(1));\n  }\n};\n\n\n// 16. Write a function that accepts a string and creates an array where each letter\n// occupies an index of the array.\nvar createArray = function(str, i = 0){\n  // base case\n  // return array, because that's what we're building into\n  if (!str.length) {\n    return [];\n  } \n  return [str[0]].concat(createArray(str.slice(1)));\n};\n\n\n// 17. Reverse the order of an array\nvar reverseArr = function (array) {\n  // base case: array is empty?\n  if (!array.length) {\n    return [];\n  } \n  // add index 1 and after to the beginning of the array, tagging index 0 on the end\n  return reverseArr(array.slice(1)).concat(array[0]);\n};\n\n// 18. Create a new array with a given value and length.\n// buildList(0,5) // [0,0,0,0,0]\n// buildList(7,3) // [7,7,7]\nvar buildList = function(value, length) {\n  // create new array?\n  // base case\n  if (length === 0) {\n    return [];\n  } \n  return [value].concat(buildList(value, length - 1));\n};\n\n// 19. Count the occurence of a value inside a list.\n// countOccurrence([2,7,4,4,1,4], 4) // 3\n// countOccurrence([2,'banana',4,4,1,'banana'], 'banana') // 2\nvar countOccurrence = function(array, value) {\n  // base case\n  if (!array.length) {\n    return 0;\n  }\n  if (array[0] !== value) {\n    return countOccurrence(array.splice(1), value);\n  } if (array[0] === value) {\n    return 1 + countOccurrence(array.splice(1), value);\n  } \n};\n\n// 20. Write a recursive version of map.\n// rMap([1,2,3], timesTwo); // [2,4,6]\nvar rMap = function(array, callback) {\n  // base case\n  if (!array.length) {\n    return [];\n  }\n  return [callback(array[0])].concat(rMap(array.slice(1), callback));\n};\n\n// 21. Write a function that counts the number of times a key occurs in an object.\n// var testobj = {'e': {'x':'y'}, 't':{'r': {'e':'r'}, 'p': {'y':'r'}},'y':'e'};\n// countKeysInObj(testobj, 'r') // 1\n// countKeysInObj(testobj, 'e') // 2\nvar countKeysInObj = function(obj, key) {\n};\n\n// 22. Write a function that counts the number of times a value occurs in an object.\n// var testobj = {'e': {'x':'y'}, 't':{'r': {'e':'r'}, 'p': {'y':'r'}},'y':'e'};\n// countValuesInObj(testobj, 'r') // 2\n// countValuesInObj(testobj, 'e') // 1\nvar countValuesInObj = function(obj, value) {\n};\n\n// 23. Find all keys in an object (and nested objects) by a provided name and rename\n// them to a provided new name while preserving the value stored at that key.\nvar replaceKeysInObj = function(obj, key, newKey) {\n};\n\n// 24. Get the first n Fibonacci numbers.  In the Fibonacci Sequence, each subsequent\n// number is the sum of the previous two.\n// Example:  0, 1, 1, 2, 3, 5, 8, 13, 21, 34.....\n// fibonacci(5);  // [0, 1, 1, 2, 3, 5]\n// Note:  The 0 is not counted.\nvar fibonacci = function(n) {\n};\n\n// 25. Return the Fibonacci number located at index n of the Fibonacci sequence.\n// [0,1,1,2,3,5,8,13,21]\n// nthFibo(5); // 5\n// nthFibo(7); // 13\n// nthFibo(3); // 2\n// Fibonacci sequence is like reduce + sum\n\nvar nthFibo = function(n, array = [0,1]) {\n  // base case is n = 0\n  if (n === 0) {\n    return 0;\n  } if (n < 0) {\n    return null;\n  }\n  if (n === 1) {\n    return array[array.length - 1];\n  }\n  array = array.concat([array[array.length - 1] + array[array.length - 2]]);\n  return nthFibo(n-1, array);\n};\n\n// 26. Given an array of words, return a new array containing each word capitalized.\n// var words = ['i', 'am', 'learning', 'recursion'];\n// capitalizedWords(words); // ['I', 'AM', 'LEARNING', 'RECURSION']\n\nvar capitalizeWords = function(input) {\n  // base case\n  if (!input.length) {\n    return [];\n  } return [input[0].toUpperCase()].concat((capitalizeWords(input.slice(1))));\n};\n\n// 27. Given an array of strings, capitalize the first letter of each index.\n// capitalizeFirst(['car', 'poop', 'banana']); // ['Car', 'Poop', 'Banana']\nvar capitalizeFirst = function(array) {\n  if (!array.length) {\n    return [];\n  } return [array[0][0].toUpperCase() + array[0].slice(1)].concat((capitalizeFirst(array.slice(1))));\n};\n\n\n// 28. Return the sum of all even numbers in an object containing nested objects.\n// var obj1 = {\n//   a: 2,\n//   b: {b: 2, bb: {b: 3, bb: {b: 2}}},\n//   c: {c: {c: 2}, cc: 'ball', ccc: 5},\n//   d: 1,\n//   e: {e: {e: 2}, ee: 'car'}\n// };\n// nestedEvenSum(obj1); // 10\nvar nestedEvenSum = function(obj) {\n};\n\n// 29. Flatten an array containing nested arrays.\n// Example: flatten([1,[2],[3,[[4]]],5]); // [1,2,3,4,5]\nvar flatten = function(arrays) {\n};\n\n// 30. Given a string, return an object containing tallies of each letter.\n// letterTally('potato'); // {'p':1, 'o':2, 't':2, 'a':1}\nvar letterTally = function(str, obj = {}) {\n  // base case\n  if (!str.length) {\n    return obj;\n  } // if obj does not have str[0] as a property,  \n  if (!obj[str[0]]) {\n    obj[str[0]] = 1;\n    console.log(obj);\n    // obj is not holding onto new prop-value pair each time\n    return letterTally(str.slice(1), obj);\n  } \n  if (str[0] in obj) {\n    console.log(\"sup\");\n    ++obj[str[0]];\n    return letterTally(str.slice(1), obj);\n  }\n};\n\n// 31. Eliminate consecutive duplicates in a list.  If the list contains repeated\n// elements they should be replaced with a single copy of the element. The order of the\n// elements should not be changed.\n// Example: compress([1, 2, 2, 3, 4, 4, 5, 5, 5]) // [1, 2, 3, 4, 5]\n// Example: compress([1, 2, 2, 3, 4, 4, 2, 5, 5, 5, 4, 4]) // [1, 2, 3, 4, 2, 5, 4]\nvar compress = function(list, newArray = []) {\n  // base case\n  if (!list.length) {\n    return newArray;\n  } \n  // if newArray is empty, add the first element of list to the array and call compress on the sliced list\n  if (!newArray.length) {\n    return (compress(list.slice(1), newArray.concat(list[0])));\n  } if (newArray[newArray.length - 1] === list[0]) {\n    return compress(list.slice(1), newArray);\n  } \n  if (newArray[newArray.length - 1] !== list[0]) {\n    console.log(\"hey\");\n    return (compress(list.slice(1), newArray.concat(list[0]))); \n  }\n};\n\n// 32. Augment every element in a list with a new value where each element is an array\n// itself.\n// Example: augmentElements([[],[3],[7]], 5); // [[5],[3,5],[7,5]]\nvar augmentElements = function(array, aug) {\n};\n\n// 33. Reduce a series of zeroes to a single 0.\n// minimizeZeroes([2,0,0,0,1,4]) // [2,0,1,4]\n// minimizeZeroes([2,0,0,0,1,0,0,4]) // [2,0,1,0,4]\nvar minimizeZeroes = function(array, newArray = []) {\n  // base case\n  if (!array.length) {\n    return newArray;\n  } \n  // if newArray is empty, add the first element of list to the array and call compress on the sliced list\n  if (!newArray.length) {\n    return (minimizeZeroes(array.slice(1), newArray.concat(array[0])));\n  } if (newArray[newArray.length - 1] === array[0] && array[0] === 0) {\n    return minimizeZeroes(array.slice(1), newArray);\n  } \n  if (newArray[newArray.length - 1] !== array[0]) {\n    return (minimizeZeroes(array.slice(1), newArray.concat(array[0]))); \n  }\n};\n\n// 34. Alternate the numbers in an array between positive and negative regardless of\n// their original sign.  The first number in the index always needs to be positive.\n// alternateSign([2,7,8,3,1,4]) // [2,-7,8,-3,1,-4]\n// alternateSign([-2,-7,8,3,-1,4]) // [2,-7,8,-3,1,-4]\nvar alternateSign = function(array, newArray = []) {\n  if (!array.length) {\n    return newArray;\n  } \n  // if length of newArray is even, then the next number should be positive. \n  if (newArray.length % 2 === 0) {\n    // so if first element of <array> is positive, concat that number to end of newArray\n    if (array[0] > 0) {\n      newArray.push(array[0]);\n      return alternateSign(array.slice(1), newArray);\n    }\n    // if first element of <array> is negative, multiply that by -1 and add it to newArray\n    if (array[0] < 0) {\n      array[0] *= -1;\n      newArray.push(array[0]);\n      return alternateSign(array.slice(1), newArray);\n    }\n  } \n  // if length of newArray is odd, then the next number should be negative. \n  if (newArray.length % 2 === 1) {\n    // So if first element of <array> is negative, concat that number to end of newArray\n    if (array[0] < 0) {\n      newArray.push(array[0]);\n      return alternateSign(array.slice(1), newArray);\n    }\n    // if first element of <array> is positive, multiply it by -1 before concating\n   if (array[0] > 0) {\n    array[0] *= -1;\n    newArray.push(array[0]);\n    return alternateSign(array.slice(1), newArray);\n   }\n  }\n};\n\n// 35. Given a string, return a string with digits converted to their word equivalent.\n// Assume all numbers are single digits (less than 10).\n// numToText(\"I have 5 dogs and 6 ponies\"); // \"I have five dogs and six ponies\"\nvar numToText = function(str, newStr = \"\") {\n  // if strArray is empty, return empty string\n  if (!str.length) {\n    return newStr;\n  } \n  // recursively call in each conditional that's checking for the digits\n  if (str[0] === \"0\") {\n    return newStr.concat(\"zero\").concat(numToText(str.slice(1), newStr));  \n  } if (str[0] === \"1\") {\n    return newStr.concat(\"one\").concat(numToText(str.slice(1), newStr));  \n  } if (str[0] === \"2\") {\n    return newStr.concat(\"two\").concat(numToText(str.slice(1), newStr));  \n  } if (str[0] === \"3\") {\n    return newStr.concat(\"three\").concat(numToText(str.slice(1), newStr));  \n  } if (str[0] === \"4\") {\n    return newStr.concat(\"four\").concat(numToText(str.slice(1), newStr));  \n  } if (str[0] === \"5\") {\n    return newStr.concat(\"five\").concat(numToText(str.slice(1), newStr));  \n  } if (str[0] === \"6\") {\n    return newStr.concat(\"six\").concat(numToText(str.slice(1), newStr));  \n  } if (str[0] === \"7\") {\n    return newStr.concat(\"seven\").concat(numToText(str.slice(1), newStr));  \n  } if (str[0] === \"8\") {\n    return newStr.concat(\"eight\").concat(numToText(str.slice(1), newStr));  \n  } if (str[0] === \"9\") {\n    return newStr.concat(\"nine\").concat(numToText(str.slice(1), newStr));  \n  } \n  // final recursive call for all non-number cases\n  return newStr.concat(str[0]).concat(numToText(str.slice(1), newStr));  \n};\n\n// *** EXTRA CREDIT ***\n\n// 36. Return the number of times a tag occurs in the DOM.\nvar tagCount = function(tag, node) {\n};\n\n// 37. Write a function for binary search.\n// Sample array:  [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n// console.log(binarySearch(5)) will return '5'\n\nvar binarySearch = function(array, target, min, max) {\n};\n\n// 38. Write a merge sort function.\n// Sample array:  [34,7,23,32,5,62]\n// Sample output: [5,7,23,32,34,62]\nvar mergeSort = function(array) {\n};\n\n\n\n//-----------------------------------\n// DON'T REMOVE THIS CODE -----------\n//-----------------------------------\n\nif ((typeof process !== 'undefined') &&\n  (typeof process.versions.node !== 'undefined')) {\n\n  /**\n   * Due to some node-related issues with spying on recursive functions,\n   * it isn't possible to test them with sinon spies like so:\n   *\n   *   var originalSum = sum;\n   *   sum = sinon.spy(sum);\n   *\n   *   sum([1, 2, 3, 4, 5, 6]);\n   *\n   *   // callCount will always 1 causing, this test to always fail in node :(\n   *   expect(sum.callCount).to.be.above(1);\n   *\n   *   sum = originalSum;\n   *\n   * However, we can work around this by using proxies!\n   * If you reassign the function to a proxy and use the `apply` trap,\n   * you can make a `proxyCallCount` property on the function,\n   * increment it each time it's called, and then test that instead.\n   *\n   *   sum.proxyCallCount = 0;\n   *   sum([1, 2, 3, 4, 5, 6]);\n   *   expect(sum.proxyCallCount).to.be.above(1);\n   *\n   * MDN Proxies: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy\n   * MDN Proxy Apply Trap: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/apply\n   */\n  const createSpyProxy = (func) => {\n    func.toString = func.toString.bind(func);\n\n    const recursiveFunctionCallCounterHandler = {\n      apply(target, thisArg, args) {\n        target.proxyCallCount = target.proxyCallCount ? target.proxyCallCount + 1 : 1;\n        return target.apply(thisArg, args);\n      },\n    };\n\n    return new Proxy(func, recursiveFunctionCallCounterHandler);\n  };\n\n  factorial = createSpyProxy(factorial);\n  sum = createSpyProxy(sum);\n  arraySum = createSpyProxy(arraySum);\n  isEven = createSpyProxy(isEven);\n  sumBelow = createSpyProxy(sumBelow);\n  range = createSpyProxy(range);\n  exponent = createSpyProxy(exponent);\n  powerOfTwo = createSpyProxy(powerOfTwo);\n  reverse = createSpyProxy(reverse);\n  palindrome = createSpyProxy(palindrome);\n  modulo = createSpyProxy(modulo);\n  multiply = createSpyProxy(multiply);\n  divide = createSpyProxy(divide);\n  gcd = createSpyProxy(gcd);\n  compareStr = createSpyProxy(compareStr);\n  createArray = createSpyProxy(createArray);\n  reverseArr = createSpyProxy(reverseArr);\n  buildList = createSpyProxy(buildList);\n  countOccurrence = createSpyProxy(countOccurrence);\n  rMap = createSpyProxy(rMap);\n  countKeysInObj = createSpyProxy(countKeysInObj);\n  countValuesInObj = createSpyProxy(countValuesInObj);\n  replaceKeysInObj = createSpyProxy(replaceKeysInObj);\n  fibonacci = createSpyProxy(fibonacci);\n  nthFibo = createSpyProxy(nthFibo);\n  capitalizeWords = createSpyProxy(capitalizeWords);\n  capitalizeFirst = createSpyProxy(capitalizeFirst);\n  nestedEvenSum = createSpyProxy(nestedEvenSum);\n  flatten = createSpyProxy(flatten);\n  letterTally = createSpyProxy(letterTally);\n  compress = createSpyProxy(compress);\n  augmentElements = createSpyProxy(augmentElements);\n  minimizeZeroes = createSpyProxy(minimizeZeroes);\n  alternateSign = createSpyProxy(alternateSign);\n  numToText = createSpyProxy(numToText);\n  tagCount = createSpyProxy(tagCount);\n  binarySearch = createSpyProxy(binarySearch);\n  mergeSort = createSpyProxy(mergeSort);\n\n  module.exports = {\n    factorial,\n    sum,\n    arraySum,\n    isEven,\n    sumBelow,\n    range,\n    exponent,\n    powerOfTwo,\n    reverse,\n    palindrome,\n    modulo,\n    multiply,\n    divide,\n    gcd,\n    compareStr,\n    createArray,\n    reverseArr,\n    buildList,\n    countOccurrence,\n    rMap,\n    countKeysInObj,\n    countValuesInObj,\n    replaceKeysInObj,\n    fibonacci,\n    nthFibo,\n    capitalizeWords,\n    capitalizeFirst,\n    nestedEvenSum,\n    flatten,\n    letterTally,\n    compress,\n    augmentElements,\n    minimizeZeroes,\n    alternateSign,\n    numToText,\n    tagCount,\n    binarySearch,\n    mergeSort,\n  };\n}\n\n//-----------------------------------\n","undoManager":{"mark":99,"position":100,"stack":[[{"start":{"row":339,"column":4},"end":{"row":339,"column":5},"action":"insert","lines":["r"],"id":3328},{"start":{"row":339,"column":5},"end":{"row":339,"column":6},"action":"insert","lines":["e"]},{"start":{"row":339,"column":6},"end":{"row":339,"column":7},"action":"insert","lines":["t"]},{"start":{"row":339,"column":7},"end":{"row":339,"column":8},"action":"insert","lines":["u"]},{"start":{"row":339,"column":8},"end":{"row":339,"column":9},"action":"insert","lines":["r"]},{"start":{"row":339,"column":9},"end":{"row":339,"column":10},"action":"insert","lines":["n"]}],[{"start":{"row":339,"column":10},"end":{"row":339,"column":11},"action":"insert","lines":[" "],"id":3329},{"start":{"row":339,"column":11},"end":{"row":339,"column":12},"action":"insert","lines":["p"]}],[{"start":{"row":339,"column":11},"end":{"row":339,"column":12},"action":"remove","lines":["p"],"id":3330}],[{"start":{"row":339,"column":11},"end":{"row":339,"column":13},"action":"insert","lines":["[]"],"id":3331}],[{"start":{"row":339,"column":13},"end":{"row":339,"column":14},"action":"insert","lines":[";"],"id":3332}],[{"start":{"row":338,"column":7},"end":{"row":338,"column":12},"action":"remove","lines":["words"],"id":3333},{"start":{"row":338,"column":7},"end":{"row":338,"column":8},"action":"insert","lines":["i"]},{"start":{"row":338,"column":8},"end":{"row":338,"column":9},"action":"insert","lines":["n"]},{"start":{"row":338,"column":9},"end":{"row":338,"column":10},"action":"insert","lines":["p"]},{"start":{"row":338,"column":10},"end":{"row":338,"column":11},"action":"insert","lines":["u"]},{"start":{"row":338,"column":11},"end":{"row":338,"column":12},"action":"insert","lines":["t"]}],[{"start":{"row":340,"column":3},"end":{"row":340,"column":4},"action":"insert","lines":[" "],"id":3334},{"start":{"row":340,"column":4},"end":{"row":340,"column":5},"action":"insert","lines":["r"]},{"start":{"row":340,"column":5},"end":{"row":340,"column":6},"action":"insert","lines":["e"]},{"start":{"row":340,"column":6},"end":{"row":340,"column":7},"action":"insert","lines":["t"]},{"start":{"row":340,"column":7},"end":{"row":340,"column":8},"action":"insert","lines":["u"]},{"start":{"row":340,"column":8},"end":{"row":340,"column":9},"action":"insert","lines":["r"]},{"start":{"row":340,"column":9},"end":{"row":340,"column":10},"action":"insert","lines":["n"]},{"start":{"row":340,"column":10},"end":{"row":340,"column":11},"action":"insert","lines":[" "]}],[{"start":{"row":340,"column":11},"end":{"row":340,"column":13},"action":"insert","lines":["[]"],"id":3335}],[{"start":{"row":340,"column":12},"end":{"row":340,"column":13},"action":"remove","lines":["]"],"id":3336},{"start":{"row":340,"column":11},"end":{"row":340,"column":12},"action":"remove","lines":["["]}],[{"start":{"row":340,"column":11},"end":{"row":340,"column":12},"action":"insert","lines":["w"],"id":3337},{"start":{"row":340,"column":12},"end":{"row":340,"column":13},"action":"insert","lines":["o"]},{"start":{"row":340,"column":13},"end":{"row":340,"column":14},"action":"insert","lines":["r"]},{"start":{"row":340,"column":14},"end":{"row":340,"column":15},"action":"insert","lines":["d"]},{"start":{"row":340,"column":15},"end":{"row":340,"column":16},"action":"insert","lines":["s"]}],[{"start":{"row":340,"column":16},"end":{"row":340,"column":18},"action":"insert","lines":["[]"],"id":3338}],[{"start":{"row":340,"column":17},"end":{"row":340,"column":18},"action":"insert","lines":["0"],"id":3339}],[{"start":{"row":340,"column":19},"end":{"row":340,"column":20},"action":"insert","lines":["."],"id":3340},{"start":{"row":340,"column":20},"end":{"row":340,"column":21},"action":"insert","lines":["t"]}],[{"start":{"row":340,"column":11},"end":{"row":340,"column":16},"action":"remove","lines":["words"],"id":3341},{"start":{"row":340,"column":11},"end":{"row":340,"column":12},"action":"insert","lines":["i"]},{"start":{"row":340,"column":12},"end":{"row":340,"column":13},"action":"insert","lines":["n"]},{"start":{"row":340,"column":13},"end":{"row":340,"column":14},"action":"insert","lines":["p"]},{"start":{"row":340,"column":14},"end":{"row":340,"column":15},"action":"insert","lines":["u"]},{"start":{"row":340,"column":15},"end":{"row":340,"column":16},"action":"insert","lines":["t"]}],[{"start":{"row":340,"column":21},"end":{"row":340,"column":22},"action":"insert","lines":["o"],"id":3342},{"start":{"row":340,"column":22},"end":{"row":340,"column":23},"action":"insert","lines":["U"]},{"start":{"row":340,"column":23},"end":{"row":340,"column":24},"action":"insert","lines":["P"]},{"start":{"row":340,"column":24},"end":{"row":340,"column":25},"action":"insert","lines":["P"]}],[{"start":{"row":340,"column":24},"end":{"row":340,"column":25},"action":"remove","lines":["P"],"id":3343},{"start":{"row":340,"column":23},"end":{"row":340,"column":24},"action":"remove","lines":["P"]}],[{"start":{"row":340,"column":23},"end":{"row":340,"column":24},"action":"insert","lines":["p"],"id":3344},{"start":{"row":340,"column":24},"end":{"row":340,"column":25},"action":"insert","lines":["p"]},{"start":{"row":340,"column":25},"end":{"row":340,"column":26},"action":"insert","lines":["e"]},{"start":{"row":340,"column":26},"end":{"row":340,"column":27},"action":"insert","lines":["r"]},{"start":{"row":340,"column":27},"end":{"row":340,"column":28},"action":"insert","lines":["C"]},{"start":{"row":340,"column":28},"end":{"row":340,"column":29},"action":"insert","lines":["a"]},{"start":{"row":340,"column":29},"end":{"row":340,"column":30},"action":"insert","lines":["s"]},{"start":{"row":340,"column":30},"end":{"row":340,"column":31},"action":"insert","lines":["e"]}],[{"start":{"row":340,"column":31},"end":{"row":340,"column":33},"action":"insert","lines":["()"],"id":3345}],[{"start":{"row":340,"column":33},"end":{"row":340,"column":34},"action":"insert","lines":["."],"id":3346},{"start":{"row":340,"column":34},"end":{"row":340,"column":35},"action":"insert","lines":["c"]},{"start":{"row":340,"column":35},"end":{"row":340,"column":36},"action":"insert","lines":["o"]},{"start":{"row":340,"column":36},"end":{"row":340,"column":37},"action":"insert","lines":["n"]},{"start":{"row":340,"column":37},"end":{"row":340,"column":38},"action":"insert","lines":["c"]},{"start":{"row":340,"column":38},"end":{"row":340,"column":39},"action":"insert","lines":["a"]},{"start":{"row":340,"column":39},"end":{"row":340,"column":40},"action":"insert","lines":["t"]}],[{"start":{"row":340,"column":40},"end":{"row":340,"column":42},"action":"insert","lines":["()"],"id":3347}],[{"start":{"row":340,"column":41},"end":{"row":340,"column":42},"action":"insert","lines":["c"],"id":3348},{"start":{"row":340,"column":42},"end":{"row":340,"column":43},"action":"insert","lines":["a"]},{"start":{"row":340,"column":43},"end":{"row":340,"column":44},"action":"insert","lines":["p"]},{"start":{"row":340,"column":44},"end":{"row":340,"column":45},"action":"insert","lines":["i"]},{"start":{"row":340,"column":45},"end":{"row":340,"column":46},"action":"insert","lines":["t"]},{"start":{"row":340,"column":46},"end":{"row":340,"column":47},"action":"insert","lines":["a"]},{"start":{"row":340,"column":47},"end":{"row":340,"column":48},"action":"insert","lines":["l"]},{"start":{"row":340,"column":48},"end":{"row":340,"column":49},"action":"insert","lines":["i"]},{"start":{"row":340,"column":49},"end":{"row":340,"column":50},"action":"insert","lines":["z"]},{"start":{"row":340,"column":50},"end":{"row":340,"column":51},"action":"insert","lines":["e"]},{"start":{"row":340,"column":51},"end":{"row":340,"column":52},"action":"insert","lines":["W"]},{"start":{"row":340,"column":52},"end":{"row":340,"column":53},"action":"insert","lines":["o"]},{"start":{"row":340,"column":53},"end":{"row":340,"column":54},"action":"insert","lines":["r"]},{"start":{"row":340,"column":54},"end":{"row":340,"column":55},"action":"insert","lines":["d"]},{"start":{"row":340,"column":55},"end":{"row":340,"column":56},"action":"insert","lines":["s"]}],[{"start":{"row":340,"column":56},"end":{"row":340,"column":58},"action":"insert","lines":["()"],"id":3349}],[{"start":{"row":340,"column":57},"end":{"row":340,"column":58},"action":"insert","lines":["i"],"id":3350},{"start":{"row":340,"column":58},"end":{"row":340,"column":59},"action":"insert","lines":["p"]},{"start":{"row":340,"column":59},"end":{"row":340,"column":60},"action":"insert","lines":["u"]},{"start":{"row":340,"column":60},"end":{"row":340,"column":61},"action":"insert","lines":["t"]},{"start":{"row":340,"column":61},"end":{"row":340,"column":62},"action":"insert","lines":["."]}],[{"start":{"row":340,"column":61},"end":{"row":340,"column":62},"action":"remove","lines":["."],"id":3351},{"start":{"row":340,"column":60},"end":{"row":340,"column":61},"action":"remove","lines":["t"]},{"start":{"row":340,"column":59},"end":{"row":340,"column":60},"action":"remove","lines":["u"]},{"start":{"row":340,"column":58},"end":{"row":340,"column":59},"action":"remove","lines":["p"]}],[{"start":{"row":340,"column":58},"end":{"row":340,"column":59},"action":"insert","lines":["n"],"id":3352},{"start":{"row":340,"column":59},"end":{"row":340,"column":60},"action":"insert","lines":["p"]},{"start":{"row":340,"column":60},"end":{"row":340,"column":61},"action":"insert","lines":["u"]},{"start":{"row":340,"column":61},"end":{"row":340,"column":62},"action":"insert","lines":["t"]},{"start":{"row":340,"column":62},"end":{"row":340,"column":63},"action":"insert","lines":["."]},{"start":{"row":340,"column":63},"end":{"row":340,"column":64},"action":"insert","lines":["s"]},{"start":{"row":340,"column":64},"end":{"row":340,"column":65},"action":"insert","lines":["l"]},{"start":{"row":340,"column":65},"end":{"row":340,"column":66},"action":"insert","lines":["i"]},{"start":{"row":340,"column":66},"end":{"row":340,"column":67},"action":"insert","lines":["c"]},{"start":{"row":340,"column":67},"end":{"row":340,"column":68},"action":"insert","lines":["e"]}],[{"start":{"row":340,"column":68},"end":{"row":340,"column":70},"action":"insert","lines":["()"],"id":3353}],[{"start":{"row":340,"column":69},"end":{"row":340,"column":70},"action":"insert","lines":["2"],"id":3354}],[{"start":{"row":340,"column":69},"end":{"row":340,"column":70},"action":"remove","lines":["2"],"id":3355}],[{"start":{"row":340,"column":69},"end":{"row":340,"column":70},"action":"insert","lines":["1"],"id":3356}],[{"start":{"row":340,"column":73},"end":{"row":340,"column":74},"action":"insert","lines":[";"],"id":3357}],[{"start":{"row":336,"column":0},"end":{"row":341,"column":2},"action":"remove","lines":["var capitalizeWords = function(input) {","  // base case","  if (!input.length) {","    return [];","  } return input[0].toUpperCase().concat(capitalizeWords(input.slice(1)));","};"],"id":3358},{"start":{"row":336,"column":0},"end":{"row":342,"column":2},"action":"insert","lines":["","var capitalizeWords = function(input) {","  // base case","  if (!input.length) {","    return [];","  } return (input[0].toUpperCase()) + \" \" + (capitalizeWords(input.slice(1)));","};"]}],[{"start":{"row":341,"column":43},"end":{"row":341,"column":44},"action":"remove","lines":[" "],"id":3359},{"start":{"row":341,"column":42},"end":{"row":341,"column":43},"action":"remove","lines":["+"]},{"start":{"row":341,"column":41},"end":{"row":341,"column":42},"action":"remove","lines":[" "]},{"start":{"row":341,"column":40},"end":{"row":341,"column":41},"action":"remove","lines":["\""]},{"start":{"row":341,"column":39},"end":{"row":341,"column":40},"action":"remove","lines":[" "]},{"start":{"row":341,"column":38},"end":{"row":341,"column":39},"action":"remove","lines":["\""]},{"start":{"row":341,"column":37},"end":{"row":341,"column":38},"action":"remove","lines":[" "]},{"start":{"row":341,"column":36},"end":{"row":341,"column":37},"action":"remove","lines":["+"]},{"start":{"row":341,"column":35},"end":{"row":341,"column":36},"action":"remove","lines":[" "]}],[{"start":{"row":341,"column":35},"end":{"row":341,"column":36},"action":"insert","lines":["."],"id":3360},{"start":{"row":341,"column":36},"end":{"row":341,"column":37},"action":"insert","lines":["c"]},{"start":{"row":341,"column":37},"end":{"row":341,"column":38},"action":"insert","lines":["o"]},{"start":{"row":341,"column":38},"end":{"row":341,"column":39},"action":"insert","lines":["n"]},{"start":{"row":341,"column":39},"end":{"row":341,"column":40},"action":"insert","lines":["c"]},{"start":{"row":341,"column":40},"end":{"row":341,"column":41},"action":"insert","lines":["a"]},{"start":{"row":341,"column":41},"end":{"row":341,"column":42},"action":"insert","lines":["t"]},{"start":{"row":341,"column":42},"end":{"row":341,"column":43},"action":"insert","lines":["("]}],[{"start":{"row":341,"column":76},"end":{"row":341,"column":77},"action":"insert","lines":[")"],"id":3361}],[{"start":{"row":341,"column":12},"end":{"row":341,"column":13},"action":"insert","lines":["["],"id":3362}],[{"start":{"row":341,"column":36},"end":{"row":341,"column":37},"action":"insert","lines":["]"],"id":3363}],[{"start":{"row":341,"column":11},"end":{"row":341,"column":12},"action":"remove","lines":["("],"id":3364}],[{"start":{"row":341,"column":77},"end":{"row":341,"column":78},"action":"remove","lines":[")"],"id":3365}],[{"start":{"row":341,"column":34},"end":{"row":341,"column":35},"action":"remove","lines":[")"],"id":3366}],[{"start":{"row":341,"column":11},"end":{"row":341,"column":76},"action":"remove","lines":["[input[0].toUpperCase()].concat((capitalizeWords(input.slice(1)))"],"id":3367},{"start":{"row":341,"column":11},"end":{"row":341,"column":85},"action":"insert","lines":["return [input[0].toUpperCase()].concat((capitalizeWords(input.slice(1))));"]}],[{"start":{"row":341,"column":11},"end":{"row":341,"column":17},"action":"remove","lines":["return"],"id":3368}],[{"start":{"row":341,"column":10},"end":{"row":341,"column":12},"action":"remove","lines":["  "],"id":3369}],[{"start":{"row":341,"column":10},"end":{"row":341,"column":11},"action":"insert","lines":[" "],"id":3370}],[{"start":{"row":341,"column":78},"end":{"row":341,"column":79},"action":"remove","lines":[";"],"id":3371}],[{"start":{"row":346,"column":0},"end":{"row":347,"column":2},"action":"remove","lines":["var capitalizeFirst = function(array) {","};"],"id":3372},{"start":{"row":346,"column":0},"end":{"row":351,"column":0},"action":"insert","lines":["var capitalizeFirst = function(array) {","  if (!array.length) {","    return [];","  } return [array[0][0].toUpperCase() + array[0].slice(1)].concat((capitalizeFirst(array.slice(1))));","};",""]}],[{"start":{"row":372,"column":38},"end":{"row":373,"column":0},"action":"insert","lines":["",""],"id":3373},{"start":{"row":373,"column":0},"end":{"row":373,"column":2},"action":"insert","lines":["  "]}],[{"start":{"row":373,"column":2},"end":{"row":373,"column":3},"action":"insert","lines":["i"],"id":3374},{"start":{"row":373,"column":3},"end":{"row":373,"column":4},"action":"insert","lines":["f"]}],[{"start":{"row":373,"column":4},"end":{"row":373,"column":5},"action":"insert","lines":[" "],"id":3375}],[{"start":{"row":373,"column":5},"end":{"row":373,"column":7},"action":"insert","lines":["()"],"id":3376}],[{"start":{"row":373,"column":6},"end":{"row":373,"column":7},"action":"insert","lines":["s"],"id":3377},{"start":{"row":373,"column":7},"end":{"row":373,"column":8},"action":"insert","lines":["t"]},{"start":{"row":373,"column":8},"end":{"row":373,"column":9},"action":"insert","lines":["r"]}],[{"start":{"row":373,"column":6},"end":{"row":373,"column":7},"action":"insert","lines":["!"],"id":3378}],[{"start":{"row":373,"column":10},"end":{"row":373,"column":11},"action":"insert","lines":["."],"id":3379},{"start":{"row":373,"column":11},"end":{"row":373,"column":12},"action":"insert","lines":["l"]},{"start":{"row":373,"column":12},"end":{"row":373,"column":13},"action":"insert","lines":["e"]},{"start":{"row":373,"column":13},"end":{"row":373,"column":14},"action":"insert","lines":["n"]},{"start":{"row":373,"column":14},"end":{"row":373,"column":15},"action":"insert","lines":["g"]},{"start":{"row":373,"column":15},"end":{"row":373,"column":16},"action":"insert","lines":["t"]},{"start":{"row":373,"column":16},"end":{"row":373,"column":17},"action":"insert","lines":["h"]}],[{"start":{"row":373,"column":18},"end":{"row":373,"column":19},"action":"insert","lines":[" "],"id":3380},{"start":{"row":373,"column":19},"end":{"row":373,"column":20},"action":"insert","lines":["{"]}],[{"start":{"row":373,"column":20},"end":{"row":375,"column":3},"action":"insert","lines":["","    ","  }"],"id":3381}],[{"start":{"row":374,"column":4},"end":{"row":374,"column":5},"action":"insert","lines":["e"],"id":3382},{"start":{"row":374,"column":5},"end":{"row":374,"column":6},"action":"insert","lines":["t"]},{"start":{"row":374,"column":6},"end":{"row":374,"column":7},"action":"insert","lines":["u"]},{"start":{"row":374,"column":7},"end":{"row":374,"column":8},"action":"insert","lines":["r"]},{"start":{"row":374,"column":8},"end":{"row":374,"column":9},"action":"insert","lines":["n"]}],[{"start":{"row":374,"column":8},"end":{"row":374,"column":9},"action":"remove","lines":["n"],"id":3383},{"start":{"row":374,"column":7},"end":{"row":374,"column":8},"action":"remove","lines":["r"]},{"start":{"row":374,"column":6},"end":{"row":374,"column":7},"action":"remove","lines":["u"]},{"start":{"row":374,"column":5},"end":{"row":374,"column":6},"action":"remove","lines":["t"]},{"start":{"row":374,"column":4},"end":{"row":374,"column":5},"action":"remove","lines":["e"]}],[{"start":{"row":374,"column":4},"end":{"row":374,"column":5},"action":"insert","lines":["r"],"id":3384},{"start":{"row":374,"column":5},"end":{"row":374,"column":6},"action":"insert","lines":["e"]},{"start":{"row":374,"column":6},"end":{"row":374,"column":7},"action":"insert","lines":["t"]},{"start":{"row":374,"column":7},"end":{"row":374,"column":8},"action":"insert","lines":["u"]},{"start":{"row":374,"column":8},"end":{"row":374,"column":9},"action":"insert","lines":["r"]},{"start":{"row":374,"column":9},"end":{"row":374,"column":10},"action":"insert","lines":["n"]},{"start":{"row":374,"column":10},"end":{"row":374,"column":11},"action":"insert","lines":[" "]},{"start":{"row":374,"column":11},"end":{"row":374,"column":12},"action":"insert","lines":["{"]},{"start":{"row":374,"column":12},"end":{"row":374,"column":13},"action":"insert","lines":["}"]},{"start":{"row":374,"column":13},"end":{"row":374,"column":14},"action":"insert","lines":[";"]}],[{"start":{"row":375,"column":3},"end":{"row":375,"column":4},"action":"insert","lines":[" "],"id":3385},{"start":{"row":375,"column":4},"end":{"row":375,"column":5},"action":"insert","lines":["r"]},{"start":{"row":375,"column":5},"end":{"row":375,"column":6},"action":"insert","lines":["e"]},{"start":{"row":375,"column":6},"end":{"row":375,"column":7},"action":"insert","lines":["t"]},{"start":{"row":375,"column":7},"end":{"row":375,"column":8},"action":"insert","lines":["u"]},{"start":{"row":375,"column":8},"end":{"row":375,"column":9},"action":"insert","lines":["r"]},{"start":{"row":375,"column":9},"end":{"row":375,"column":10},"action":"insert","lines":["n"]}],[{"start":{"row":375,"column":10},"end":{"row":375,"column":11},"action":"insert","lines":[" "],"id":3386}],[{"start":{"row":372,"column":35},"end":{"row":372,"column":36},"action":"insert","lines":[" "],"id":3387},{"start":{"row":372,"column":36},"end":{"row":372,"column":37},"action":"insert","lines":["="]}],[{"start":{"row":372,"column":37},"end":{"row":372,"column":38},"action":"insert","lines":[" "],"id":3388}],[{"start":{"row":372,"column":38},"end":{"row":372,"column":40},"action":"insert","lines":["[]"],"id":3389}],[{"start":{"row":372,"column":39},"end":{"row":372,"column":40},"action":"remove","lines":["]"],"id":3390},{"start":{"row":372,"column":38},"end":{"row":372,"column":39},"action":"remove","lines":["["]}],[{"start":{"row":372,"column":38},"end":{"row":372,"column":40},"action":"insert","lines":["{}"],"id":3391}],[{"start":{"row":374,"column":12},"end":{"row":374,"column":13},"action":"remove","lines":["}"],"id":3392},{"start":{"row":374,"column":11},"end":{"row":374,"column":12},"action":"remove","lines":["{"]}],[{"start":{"row":374,"column":11},"end":{"row":374,"column":12},"action":"insert","lines":["o"],"id":3393},{"start":{"row":374,"column":12},"end":{"row":374,"column":13},"action":"insert","lines":["b"]},{"start":{"row":374,"column":13},"end":{"row":374,"column":14},"action":"insert","lines":["j"]}],[{"start":{"row":372,"column":0},"end":{"row":376,"column":2},"action":"remove","lines":["var letterTally = function(str, obj = {}) {","  if (!str.length) {","    return obj;","  } return ","};"],"id":3394},{"start":{"row":372,"column":0},"end":{"row":390,"column":2},"action":"insert","lines":["var letterTally = function(str, obj = {}) {","  // base case","  // console.log(str);","  if (!str.length) {","    return obj;","  } // if obj does not have str[0] as a property,  ","    if (!obj[str[0]]) {","      obj[str[0]] = 1;","      // console.log(\"first index: \" + str[0]);","      // console.log(obj);","      return letterTally(str.slice(1));","    } ","    // console.log(obj[str[0]]);","    if (obj.hasOwnProperty(str[0])) {","      console.log(str[0]);","      ++obj[str[0]];","      return letterTally(str.slice(1));","    }","};"]}],[{"start":{"row":397,"column":31},"end":{"row":398,"column":0},"action":"insert","lines":["",""],"id":3395},{"start":{"row":398,"column":0},"end":{"row":398,"column":2},"action":"insert","lines":["  "]}],[{"start":{"row":398,"column":2},"end":{"row":398,"column":3},"action":"insert","lines":["/"],"id":3396},{"start":{"row":398,"column":3},"end":{"row":398,"column":4},"action":"insert","lines":["/"]}],[{"start":{"row":398,"column":4},"end":{"row":398,"column":5},"action":"insert","lines":[" "],"id":3397},{"start":{"row":398,"column":5},"end":{"row":398,"column":6},"action":"insert","lines":["b"]},{"start":{"row":398,"column":6},"end":{"row":398,"column":7},"action":"insert","lines":["a"]},{"start":{"row":398,"column":7},"end":{"row":398,"column":8},"action":"insert","lines":["s"]},{"start":{"row":398,"column":8},"end":{"row":398,"column":9},"action":"insert","lines":["e"]}],[{"start":{"row":398,"column":9},"end":{"row":398,"column":10},"action":"insert","lines":[" "],"id":3398},{"start":{"row":398,"column":10},"end":{"row":398,"column":11},"action":"insert","lines":["c"]},{"start":{"row":398,"column":11},"end":{"row":398,"column":12},"action":"insert","lines":["a"]},{"start":{"row":398,"column":12},"end":{"row":398,"column":13},"action":"insert","lines":["s"]},{"start":{"row":398,"column":13},"end":{"row":398,"column":14},"action":"insert","lines":["e"]}],[{"start":{"row":398,"column":14},"end":{"row":399,"column":0},"action":"insert","lines":["",""],"id":3399},{"start":{"row":399,"column":0},"end":{"row":399,"column":2},"action":"insert","lines":["  "]},{"start":{"row":399,"column":2},"end":{"row":399,"column":3},"action":"insert","lines":["i"]},{"start":{"row":399,"column":3},"end":{"row":399,"column":4},"action":"insert","lines":["f"]}],[{"start":{"row":399,"column":4},"end":{"row":399,"column":5},"action":"insert","lines":[" "],"id":3400}],[{"start":{"row":399,"column":5},"end":{"row":399,"column":7},"action":"insert","lines":["()"],"id":3401}],[{"start":{"row":399,"column":6},"end":{"row":399,"column":7},"action":"insert","lines":["l"],"id":3402},{"start":{"row":399,"column":7},"end":{"row":399,"column":8},"action":"insert","lines":["i"]},{"start":{"row":399,"column":8},"end":{"row":399,"column":9},"action":"insert","lines":["s"]},{"start":{"row":399,"column":9},"end":{"row":399,"column":10},"action":"insert","lines":["t"]},{"start":{"row":399,"column":10},"end":{"row":399,"column":11},"action":"insert","lines":["."]},{"start":{"row":399,"column":11},"end":{"row":399,"column":12},"action":"insert","lines":["l"]},{"start":{"row":399,"column":12},"end":{"row":399,"column":13},"action":"insert","lines":["e"]},{"start":{"row":399,"column":13},"end":{"row":399,"column":14},"action":"insert","lines":["n"]},{"start":{"row":399,"column":14},"end":{"row":399,"column":15},"action":"insert","lines":["g"]},{"start":{"row":399,"column":15},"end":{"row":399,"column":16},"action":"insert","lines":["t"]},{"start":{"row":399,"column":16},"end":{"row":399,"column":17},"action":"insert","lines":["h"]}],[{"start":{"row":399,"column":17},"end":{"row":399,"column":18},"action":"insert","lines":[" "],"id":3403},{"start":{"row":399,"column":18},"end":{"row":399,"column":19},"action":"insert","lines":["="]}],[{"start":{"row":399,"column":18},"end":{"row":399,"column":19},"action":"remove","lines":["="],"id":3404},{"start":{"row":399,"column":17},"end":{"row":399,"column":18},"action":"remove","lines":[" "]}],[{"start":{"row":399,"column":6},"end":{"row":399,"column":7},"action":"insert","lines":["!"],"id":3405}],[{"start":{"row":399,"column":19},"end":{"row":399,"column":20},"action":"insert","lines":[" "],"id":3406},{"start":{"row":399,"column":20},"end":{"row":399,"column":21},"action":"insert","lines":["{"]}],[{"start":{"row":399,"column":21},"end":{"row":401,"column":3},"action":"insert","lines":["","    ","  }"],"id":3407}],[{"start":{"row":400,"column":4},"end":{"row":400,"column":5},"action":"insert","lines":["r"],"id":3408},{"start":{"row":400,"column":5},"end":{"row":400,"column":6},"action":"insert","lines":["e"]},{"start":{"row":400,"column":6},"end":{"row":400,"column":7},"action":"insert","lines":["t"]},{"start":{"row":400,"column":7},"end":{"row":400,"column":8},"action":"insert","lines":["r"]},{"start":{"row":400,"column":8},"end":{"row":400,"column":9},"action":"insert","lines":["n"]}],[{"start":{"row":400,"column":8},"end":{"row":400,"column":9},"action":"remove","lines":["n"],"id":3409},{"start":{"row":400,"column":7},"end":{"row":400,"column":8},"action":"remove","lines":["r"]}],[{"start":{"row":400,"column":7},"end":{"row":400,"column":8},"action":"insert","lines":["u"],"id":3410},{"start":{"row":400,"column":8},"end":{"row":400,"column":9},"action":"insert","lines":["r"]},{"start":{"row":400,"column":9},"end":{"row":400,"column":10},"action":"insert","lines":["n"]}],[{"start":{"row":400,"column":10},"end":{"row":400,"column":11},"action":"insert","lines":[" "],"id":3411}],[{"start":{"row":400,"column":11},"end":{"row":400,"column":13},"action":"insert","lines":["[]"],"id":3412}],[{"start":{"row":400,"column":13},"end":{"row":400,"column":14},"action":"insert","lines":[";"],"id":3413}],[{"start":{"row":401,"column":3},"end":{"row":401,"column":4},"action":"insert","lines":[" "],"id":3414}],[{"start":{"row":397,"column":0},"end":{"row":402,"column":2},"action":"remove","lines":["var compress = function(list) {","  // base case","  if (!list.length) {","    return [];","  } ","};"],"id":3415},{"start":{"row":397,"column":0},"end":{"row":408,"column":2},"action":"insert","lines":["var compress = function(list, newArray = []) {","  // base case","  if (!list.length) {","    return newArray;","  } if (newArray.includes(list[0])) {","    return (compress(list.slice(1), newArray));","  } if (!newArray.includes(list[0])) {","    return newArray","      .concat(list[0])","      .concat(compress(list.slice(1), newArray)); ","  }","};"]}],[{"start":{"row":372,"column":0},"end":{"row":390,"column":2},"action":"remove","lines":["var letterTally = function(str, obj = {}) {","  // base case","  // console.log(str);","  if (!str.length) {","    return obj;","  } // if obj does not have str[0] as a property,  ","    if (!obj[str[0]]) {","      obj[str[0]] = 1;","      // console.log(\"first index: \" + str[0]);","      // console.log(obj);","      return letterTally(str.slice(1));","    } ","    // console.log(obj[str[0]]);","    if (obj.hasOwnProperty(str[0])) {","      console.log(str[0]);","      ++obj[str[0]];","      return letterTally(str.slice(1));","    }","};"],"id":3416},{"start":{"row":372,"column":0},"end":{"row":388,"column":2},"action":"insert","lines":["var letterTally = function(str, obj = {}) {","  // base case","  if (!str.length) {","    return obj;","  } // if obj does not have str[0] as a property,  ","  if (!obj[str[0]]) {","    obj[str[0]] = 1;","    console.log(obj);","    // obj is not holding onto new prop-value pair each time","    return letterTally(str.slice(1), obj);","  } ","  if (str[0] in obj) {","    console.log(\"sup\");","    ++obj[str[0]];","    return letterTally(str.slice(1), obj);","  }","};"]}],[{"start":{"row":395,"column":0},"end":{"row":406,"column":2},"action":"remove","lines":["var compress = function(list, newArray = []) {","  // base case","  if (!list.length) {","    return newArray;","  } if (newArray.includes(list[0])) {","    return (compress(list.slice(1), newArray));","  } if (!newArray.includes(list[0])) {","    return newArray","      .concat(list[0])","      .concat(compress(list.slice(1), newArray)); ","  }","};"],"id":3417},{"start":{"row":395,"column":0},"end":{"row":410,"column":2},"action":"insert","lines":["var compress = function(list, newArray = []) {","  // base case","  if (!list.length) {","    return newArray;","  } ","  // if newArray is empty, add the first element of list to the array and call compress on the sliced list","  if (!newArray.length) {","    return (compress(list.slice(1), newArray.concat(list[0])));","  } if (newArray[newArray.length - 1] === list[0]) {","    return compress(list.slice(1), newArray);","  } ","  if (newArray[newArray.length - 1] !== list[0]) {","    console.log(\"hey\");","    return (compress(list.slice(1), newArray.concat(list[0]))); ","  }","};"]}],[{"start":{"row":421,"column":0},"end":{"row":422,"column":2},"action":"remove","lines":["var minimizeZeroes = function(array) {","};"],"id":3418},{"start":{"row":421,"column":0},"end":{"row":435,"column":2},"action":"insert","lines":["var minimizeZeroes = function(array, newArray = []) {","  // base case","  if (!array.length) {","    return newArray;","  } ","  // if newArray is empty, add the first element of list to the array and call compress on the sliced list","  if (!newArray.length) {","    return (compress(array.slice(1), newArray.concat(array[0])));","  } if (newArray[newArray.length - 1] === array[0] && array[0] === 0) {","    return compress(array.slice(1), newArray);","  } ","  if (newArray[newArray.length - 1] !== array[0]) {","    return (compress(array.slice(1), newArray.concat(array[0]))); ","  }","};"]}],[{"start":{"row":428,"column":12},"end":{"row":428,"column":20},"action":"remove","lines":["compress"],"id":3419},{"start":{"row":428,"column":12},"end":{"row":428,"column":13},"action":"insert","lines":["m"]},{"start":{"row":428,"column":13},"end":{"row":428,"column":14},"action":"insert","lines":["i"]},{"start":{"row":428,"column":14},"end":{"row":428,"column":15},"action":"insert","lines":["n"]},{"start":{"row":428,"column":15},"end":{"row":428,"column":16},"action":"insert","lines":["i"]},{"start":{"row":428,"column":16},"end":{"row":428,"column":17},"action":"insert","lines":["m"]},{"start":{"row":428,"column":17},"end":{"row":428,"column":18},"action":"insert","lines":["i"]},{"start":{"row":428,"column":18},"end":{"row":428,"column":19},"action":"insert","lines":["z"]},{"start":{"row":428,"column":19},"end":{"row":428,"column":20},"action":"insert","lines":["e"]},{"start":{"row":428,"column":20},"end":{"row":428,"column":21},"action":"insert","lines":["Z"]},{"start":{"row":428,"column":21},"end":{"row":428,"column":22},"action":"insert","lines":["e"]}],[{"start":{"row":428,"column":22},"end":{"row":428,"column":23},"action":"insert","lines":["r"],"id":3420},{"start":{"row":428,"column":23},"end":{"row":428,"column":24},"action":"insert","lines":["o"]},{"start":{"row":428,"column":24},"end":{"row":428,"column":25},"action":"insert","lines":["e"]},{"start":{"row":428,"column":25},"end":{"row":428,"column":26},"action":"insert","lines":["s"]}],[{"start":{"row":430,"column":11},"end":{"row":430,"column":19},"action":"remove","lines":["compress"],"id":3421},{"start":{"row":430,"column":11},"end":{"row":430,"column":12},"action":"insert","lines":["m"]},{"start":{"row":430,"column":12},"end":{"row":430,"column":13},"action":"insert","lines":["i"]},{"start":{"row":430,"column":13},"end":{"row":430,"column":14},"action":"insert","lines":["n"]},{"start":{"row":430,"column":14},"end":{"row":430,"column":15},"action":"insert","lines":["i"]},{"start":{"row":430,"column":15},"end":{"row":430,"column":16},"action":"insert","lines":["m"]},{"start":{"row":430,"column":16},"end":{"row":430,"column":17},"action":"insert","lines":["i"]}],[{"start":{"row":430,"column":11},"end":{"row":430,"column":17},"action":"remove","lines":["minimi"],"id":3422},{"start":{"row":430,"column":11},"end":{"row":430,"column":25},"action":"insert","lines":["minimizeZeroes"]}],[{"start":{"row":433,"column":12},"end":{"row":433,"column":20},"action":"remove","lines":["compress"],"id":3423},{"start":{"row":433,"column":12},"end":{"row":433,"column":13},"action":"insert","lines":["m"]},{"start":{"row":433,"column":13},"end":{"row":433,"column":14},"action":"insert","lines":["i"]},{"start":{"row":433,"column":14},"end":{"row":433,"column":15},"action":"insert","lines":["n"]},{"start":{"row":433,"column":15},"end":{"row":433,"column":16},"action":"insert","lines":["i"]}],[{"start":{"row":433,"column":12},"end":{"row":433,"column":16},"action":"remove","lines":["mini"],"id":3424},{"start":{"row":433,"column":12},"end":{"row":433,"column":26},"action":"insert","lines":["minimizeZeroes"]}],[{"start":{"row":441,"column":0},"end":{"row":442,"column":2},"action":"remove","lines":["var alternateSign = function(array) {","};"],"id":3425},{"start":{"row":441,"column":0},"end":{"row":474,"column":2},"action":"insert","lines":["var alternateSign = function(array, newArray = []) {","  if (!array.length) {","    return newArray;","  } ","  // if length of newArray is even, then the next number should be positive. ","  if (newArray.length % 2 === 0) {","    // so if first element of <array> is positive, concat that number to end of newArray","    if (array[0] > 0) {","      newArray.push(array[0]);","      return alternateSign(array.slice(1), newArray);","    }","    // if first element of <array> is negative, multiply that by -1 and add it to newArray","    if (array[0] < 0) {","      array[0] *= -1;","      newArray.push(array[0]);","      return alternateSign(array.slice(1), newArray);","    }","  } ","  // if length of newArray is odd, then the next number should be negative. ","  if (newArray.length % 2 === 1) {","    console.log(\"hey\");","    // So if first element of <array> is negative, concat that number to end of newArray","    if (array[0] < 0) {","      newArray.push(array[0]);","      return alternateSign(array.slice(1), newArray);","    }","    // if first element of <array> is positive, multiply it by -1 before concating","   if (array[0] > 0) {","    array[0] *= -1;","    newArray.push(array[0]);","    return alternateSign(array.slice(1), newArray);","   }","  }","};"]}],[{"start":{"row":479,"column":0},"end":{"row":480,"column":2},"action":"remove","lines":["var numToText = function(str) {","};"],"id":3426},{"start":{"row":479,"column":0},"end":{"row":518,"column":2},"action":"insert","lines":["var numToText = function(str, newStr = \"\") {","  // if strArray is empty, return empty string","  if (!str.length) {","    return newStr;","  } ","  // recursively call in each conditional that's checking for the digits","  if (str[0] === \"0\") {","    newStr.concat(\"zero\");","    return newStr.concat(numToText(str.slice(1), newStr));  ","  } if (str[0] === \"1\") {","    newStr.concat(\"one\");","    return newStr.concat(numToText(str.slice(1), newStr));  ","  } if (str[0] === \"2\") {","    newStr.concat(\"two\");","    return newStr.concat(numToText(str.slice(1), newStr));  ","  } if (str[0] === \"3\") {","    newStr.concat(\"three\");","    return newStr.concat(numToText(str.slice(1), newStr));  ","  } if (str[0] === \"4\") {","    newStr.concat(\"four\");","    return newStr.concat(numToText(str.slice(1), newStr));  ","  } if (str[0] === \"5\") {","    newStr.concat(\"five\");","    return newStr.concat(numToText(str.slice(1), newStr));  ","  } if (str[0] === \"6\") {","    newStr.concat(\"six\");","    return newStr.concat(numToText(str.slice(1), newStr));  ","  } if (str[0] === \"7\") {","    newStr.concat(\"seven\");","    return newStr.concat(numToText(str.slice(1), newStr));  ","  } if (str[0] === \"8\") {","    newStr.concat(\"eight\");","    return newStr.concat(numToText(str.slice(1), newStr));  ","  } if (str[0] === \"9\") {","    newStr.concat(\"nine\");","    return newStr.concat(numToText(str.slice(1), newStr));  ","  } ","  // final recursive call for all non-number cases","  return newStr.concat(numToText(str.slice(1), newStr));  ","};"]}],[{"start":{"row":479,"column":0},"end":{"row":518,"column":2},"action":"remove","lines":["var numToText = function(str, newStr = \"\") {","  // if strArray is empty, return empty string","  if (!str.length) {","    return newStr;","  } ","  // recursively call in each conditional that's checking for the digits","  if (str[0] === \"0\") {","    newStr.concat(\"zero\");","    return newStr.concat(numToText(str.slice(1), newStr));  ","  } if (str[0] === \"1\") {","    newStr.concat(\"one\");","    return newStr.concat(numToText(str.slice(1), newStr));  ","  } if (str[0] === \"2\") {","    newStr.concat(\"two\");","    return newStr.concat(numToText(str.slice(1), newStr));  ","  } if (str[0] === \"3\") {","    newStr.concat(\"three\");","    return newStr.concat(numToText(str.slice(1), newStr));  ","  } if (str[0] === \"4\") {","    newStr.concat(\"four\");","    return newStr.concat(numToText(str.slice(1), newStr));  ","  } if (str[0] === \"5\") {","    newStr.concat(\"five\");","    return newStr.concat(numToText(str.slice(1), newStr));  ","  } if (str[0] === \"6\") {","    newStr.concat(\"six\");","    return newStr.concat(numToText(str.slice(1), newStr));  ","  } if (str[0] === \"7\") {","    newStr.concat(\"seven\");","    return newStr.concat(numToText(str.slice(1), newStr));  ","  } if (str[0] === \"8\") {","    newStr.concat(\"eight\");","    return newStr.concat(numToText(str.slice(1), newStr));  ","  } if (str[0] === \"9\") {","    newStr.concat(\"nine\");","    return newStr.concat(numToText(str.slice(1), newStr));  ","  } ","  // final recursive call for all non-number cases","  return newStr.concat(numToText(str.slice(1), newStr));  ","};"],"id":3427},{"start":{"row":479,"column":0},"end":{"row":508,"column":2},"action":"insert","lines":["var numToText = function(str, newStr = \"\") {","  // if strArray is empty, return empty string","  if (!str.length) {","    return newStr;","  } ","  // recursively call in each conditional that's checking for the digits","  if (str[0] === \"0\") {","    return newStr.concat(\"zero\").concat(numToText(str.slice(1), newStr));  ","  } if (str[0] === \"1\") {","    return newStr.concat(\"one\").concat(numToText(str.slice(1), newStr));  ","  } if (str[0] === \"2\") {","    return newStr.concat(\"two\").concat(numToText(str.slice(1), newStr));  ","  } if (str[0] === \"3\") {","    return newStr.concat(\"three\").concat(numToText(str.slice(1), newStr));  ","  } if (str[0] === \"4\") {","    return newStr.concat(\"four\").concat(numToText(str.slice(1), newStr));  ","  } if (str[0] === \"5\") {","    return newStr.concat(\"five\").concat(numToText(str.slice(1), newStr));  ","  } if (str[0] === \"6\") {","    return newStr.concat(\"six\").concat(numToText(str.slice(1), newStr));  ","  } if (str[0] === \"7\") {","    return newStr.concat(\"seven\").concat(numToText(str.slice(1), newStr));  ","  } if (str[0] === \"8\") {","    return newStr.concat(\"eight\").concat(numToText(str.slice(1), newStr));  ","  } if (str[0] === \"9\") {","    return newStr.concat(\"nine\").concat(numToText(str.slice(1), newStr));  ","  } ","  // final recursive call for all non-number cases","  return newStr.concat(str[0]).concat(numToText(str.slice(1), newStr));  ","};"]}],[{"start":{"row":461,"column":0},"end":{"row":462,"column":0},"action":"remove","lines":["    console.log(\"hey\");",""],"id":3428}]]},"ace":{"folds":[],"customSyntax":"javascript","scrolltop":6488,"scrollleft":0,"selection":{"start":{"row":461,"column":0},"end":{"row":461,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":588,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1568335968726}